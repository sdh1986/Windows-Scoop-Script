name: Issue Handler

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 0 * * *'

jobs:
  hash-fix:
    name: Fix Hash Issues
    if: contains(github.event.issue.labels.*.name, 'hash-fix')
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Fix Hash
        shell: pwsh
        run: |
          # 从 issue 标题提取应用名
          $title = "${{ github.event.issue.title }}"
          if ($title -match '(\w+):.*hash') {
            $app = $matches[1]
            
            Write-Host "Fixing hash for $app"
            
            # 下载并运行 checkhashes
            New-Item -ItemType Directory -Force -Path "bin" | Out-Null
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/ScoopInstaller/Scoop/master/bin/checkhashes.ps1" -OutFile "bin\checkhashes.ps1"
            
            & .\bin\checkhashes.ps1 -App $app -Update
            
            # 提交更改
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add bucket/$app.json
            git commit -m "Fix: Update hash for $app (fixes #${{ github.event.issue.number }})"
            git push
            
            # 关闭 issue
            gh issue close ${{ github.event.issue.number }} --comment "Hash has been updated automatically."
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  version-check:
    name: Check Outdated Versions
    if: github.event_name == 'schedule'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check Versions
        shell: pwsh
        run: |
          # 下载 checkver
          New-Item -ItemType Directory -Force -Path "bin" | Out-Null
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/ScoopInstaller/Scoop/master/bin/checkver.ps1" -OutFile "bin\checkver.ps1"
          
          # 检查过时的版本
          $outdated = & .\bin\checkver.ps1 -App * | Where-Object { $_ -match 'outdated' }
          
          if ($outdated) {
            $body = "The following apps have outdated versions:`n`n"
            $outdated | ForEach-Object { $body += "- $_`n" }
            
            # 创建 issue
            gh issue create --title "Outdated versions detected" --body $body --label "outdated"
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
