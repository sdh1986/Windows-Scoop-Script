name: Excavator

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      app:
        description: 'App name to update (leave empty for all)'
        required: false
        default: ''
      skip_checkver:
        description: 'Skip checkver and run auto-pr only'
        required: false
        default: 'false'
      force_update:
        description: 'Force update even if version unchanged'
        required: false
        default: 'false'

env:
  SCOOP_BRANCH: master
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  excavate:
    name: Excavate
    runs-on: windows-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.SCOOP_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Init Environment
        shell: pwsh
        run: |
          # Set PowerShell preferences
          $PSDefaultParameterValues['*:ErrorAction'] = 'Stop'
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          
          # Create bin directory if not exists
          if (!(Test-Path "bin")) {
            New-Item -ItemType Directory -Path "bin" | Out-Null
          }
          
          # Create bucket directory if not exists
          if (!(Test-Path "bucket")) {
            Write-Error "bucket directory not found! Please create bucket directory with manifest files."
            exit 1
          }
          
          Write-Host "Repository structure:" -ForegroundColor Cyan
          Get-ChildItem -Directory | Select-Object Name
      
      - name: Download Scoop Scripts
        shell: pwsh
        run: |
          $baseUrl = "https://raw.githubusercontent.com/ScoopInstaller/Scoop/master/bin"
          $scripts = @(
            'auto-pr.ps1',
            'checkver.ps1',
            'checkhashes.ps1',
            'formatjson.ps1',
            'missing-checkver.ps1',
            'test.ps1'
          )
          
          # Download supporting library
          $libUrl = "https://raw.githubusercontent.com/ScoopInstaller/Scoop/master/lib"
          if (!(Test-Path "lib")) {
            New-Item -ItemType Directory -Path "lib" | Out-Null
          }
          
          $libs = @(
            'manifest.ps1',
            'buckets.ps1',
            'versions.ps1',
            'depends.ps1',
            'install.ps1',
            'shortcuts.ps1',
            'psmodules.ps1',
            'decompress.ps1',
            'persist.ps1',
            'unix.ps1',
            'autoupdate.ps1',
            'json.ps1'
          )
          
          foreach ($script in $scripts) {
            if (!(Test-Path "bin\$script")) {
              Write-Host "Downloading $script..." -ForegroundColor Green
              try {
                Invoke-WebRequest -Uri "$baseUrl/$script" -OutFile "bin\$script"
              } catch {
                Write-Warning "Failed to download $script: $_"
              }
            }
          }
          
          foreach ($lib in $libs) {
            if (!(Test-Path "lib\$lib")) {
              Write-Host "Downloading lib/$lib..." -ForegroundColor Green
              try {
                Invoke-WebRequest -Uri "$libUrl/$lib" -OutFile "lib\$lib"
              } catch {
                Write-Warning "Failed to download lib/$lib: $_"
              }
            }
          }
      
      - name: Configure Git
        shell: pwsh
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global core.autocrlf input
          git config --global pull.rebase true
      
      - name: Check Missing Checkver
        if: github.event.inputs.skip_checkver != 'true'
        shell: pwsh
        run: |
          Write-Host "Checking for manifests without checkver..." -ForegroundColor Yellow
          $missing = & .\bin\missing-checkver.ps1
          if ($missing) {
            Write-Host "The following manifests are missing checkver:" -ForegroundColor Red
            $missing | ForEach-Object { Write-Host "  - $_" }
          }
      
      - name: Run Checkver
        id: check
        if: github.event.inputs.skip_checkver != 'true'
        shell: pwsh
        run: |
          $app = "${{ github.event.inputs.app }}"
          $force = "${{ github.event.inputs.force_update }}" -eq 'true'
          
          Write-Host "=" * 60 -ForegroundColor Cyan
          Write-Host "Running checkver..." -ForegroundColor Cyan
          Write-Host "=" * 60 -ForegroundColor Cyan
          
          $params = @()
          if ($app) {
            Write-Host "Checking single app: $app" -ForegroundColor Green
            $params += "-App", $app
          } else {
            Write-Host "Checking all apps in bucket" -ForegroundColor Green
            $params += "-App", "*"
          }
          
          $params += "-Update"
          
          if ($force) {
            Write-Host "Force update enabled" -ForegroundColor Yellow
            $params += "-Force"
          }
          
          # Run checkver
          $output = & .\bin\checkver.ps1 @params *>&1
          $output | ForEach-Object { Write-Host $_ }
          
          # Check for changes
          $changes = git status --porcelain bucket/
          if ($changes) {
            Write-Host "`nChanges detected:" -ForegroundColor Green
            $changes | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
            echo "has_updates=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "`nNo changes detected" -ForegroundColor Yellow
            echo "has_updates=false" >> $env:GITHUB_OUTPUT
          }
      
      - name: Format JSON
        if: steps.check.outputs.has_updates == 'true'
        shell: pwsh
        run: |
          Write-Host "Formatting JSON files..." -ForegroundColor Cyan
          Get-ChildItem bucket/*.json | ForEach-Object {
            & .\bin\formatjson.ps1 $_.FullName
          }
      
      - name: Test Manifests
        if: steps.check.outputs.has_updates == 'true'
        shell: pwsh
        run: |
          Write-Host "=" * 60 -ForegroundColor Cyan
          Write-Host "Testing manifests..." -ForegroundColor Cyan
          Write-Host "=" * 60 -ForegroundColor Cyan
          
          $manifests = Get-ChildItem bucket/*.json
          $failed = @()
          
          foreach ($manifest in $manifests) {
            Write-Host "Testing $($manifest.Name)..." -NoNewline
            
            try {
              $json = Get-Content $manifest.FullName -Raw | ConvertFrom-Json
              
              # Check required fields
              if (!$json.version) { throw "Missing 'version' field" }
              if (!$json.homepage) { throw "Missing 'homepage' field" }
              if (!$json.license) { throw "Missing 'license' field" }
              if (!$json.description) { throw "Missing 'description' field" }
              
              # Check URL structure
              if ($json.url) {
                if ($json.url -is [array]) {
                    foreach ($u in $json.url) {
                        if ($u -notmatch '^https?://') {
                            throw "Invalid URL: $u"
                        }
                    }
                } elseif ($json.url -notmatch '^https?://') {
                    throw "Invalid URL: $($json.url)"
                }
              } elseif ($json.architecture) {
                # Check architecture URLs
                foreach ($arch in $json.architecture.PSObject.Properties) {
                    if (!$arch.Value.url) {
                        throw "Missing URL for architecture: $($arch.Name)"
                    }
                }
              } else {
                throw "Missing 'url' or 'architecture' field"
              }
              
              Write-Host " [OK]" -ForegroundColor Green
              
            } catch {
              Write-Host " [FAIL]" -ForegroundColor Red
              Write-Host "  Error: $_" -ForegroundColor Red
              $failed += $manifest.Name
            }
          }
          
          if ($failed.Count -gt 0) {
            Write-Host "`nFailed manifests:" -ForegroundColor Red
            $failed | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
            exit 1
          } else {
            Write-Host "`nAll manifests passed validation!" -ForegroundColor Green
          }
      
      - name: Check Hashes
        if: steps.check.outputs.has_updates == 'true'
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Verifying hashes..." -ForegroundColor Cyan
          $app = "${{ github.event.inputs.app }}"
          
          if ($app) {
            & .\bin\checkhashes.ps1 -App $app
          } else {
            & .\bin\checkhashes.ps1 -App * -SkipCorrect
          }
      
      - name: Commit Changes
        if: steps.check.outputs.has_updates == 'true'
        shell: pwsh
        run: |
          git add bucket/
          
          $app = "${{ github.event.inputs.app }}"
          if ($app) {
            $message = "${app}: Update to latest version"
          } else {
            # Get list of updated apps
            $updates = git diff --cached --name-only | 
                       Where-Object { $_ -match 'bucket/(.+)\.json$' } |
                       ForEach-Object { $matches[1] }
            
            if ($updates.Count -eq 1) {
              $message = "${updates}: Update to latest version"
            } elseif ($updates.Count -le 3) {
              $message = "$($updates -join ', '): Update to latest version"
            } else {
              $message = "Update $($updates.Count) apps to latest version"
            }
          }
          
          git commit -m $message
          Write-Host "Committed: $message" -ForegroundColor Green
      
      - name: Push Changes
        if: steps.check.outputs.has_updates == 'true'
        shell: pwsh
        run: |
          $retries = 3
          $pushed = $false
          
          for ($i = 1; $i -le $retries; $i++) {
            Write-Host "Push attempt $i of $retries..." -ForegroundColor Cyan
            
            try {
              # Pull latest changes first
              git pull --rebase origin ${{ env.SCOOP_BRANCH }}
              
              # Push changes
              git push origin HEAD:${{ env.SCOOP_BRANCH }}
              $pushed = $true
              Write-Host "Successfully pushed changes!" -ForegroundColor Green
              break
              
            } catch {
              Write-Warning "Push failed: $_"
              if ($i -lt $retries) {
                Write-Host "Retrying in 5 seconds..." -ForegroundColor Yellow
                Start-Sleep -Seconds 5
              }
            }
          }
          
          if (!$pushed) {
            Write-Error "Failed to push changes after $retries attempts"
            exit 1
          }
  
  auto-pr:
    name: Create PR
    needs: excavate
    if: needs.excavate.outputs.has_updates == 'true' && github.event_name == 'schedule'
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SCOOP_BRANCH }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: auto-update-${{ github.run_number }}
          delete-branch: true
          title: "Auto-update: Manifest updates"
          body: |
            ## Automated Manifest Updates
            
            This PR contains automated version updates for app manifests.
            
            ### Details
            - **Trigger**: ${{ github.event_name }}
            - **Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Time**: ${{ github.event.repository.updated_at }}
            
            ### Changes
            Please review the file changes below to see which apps were updated.
            
            ---
            *This PR was automatically generated by GitHub Actions.*
          labels: |
            auto-update
            bot
          assignees: ${{ github.repository_owner }}
  
  notify:
    name: Notify Results
    needs: excavate
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set Status Message
        id: status
        run: |
          if [[ "${{ needs.excavate.outputs.has_updates }}" == "true" ]]; then
            echo "message=Updates found and applied" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.excavate.result }}" == "failure" ]]; then
            echo "message=Excavator failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          else
            echo "message=No updates found" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Issue on Failure
        if: needs.excavate.result == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Excavator failed - Run #${context.runNumber}`,
              body: `## Excavator Failure Report
              
              The automated update workflow has failed.
              
              **Details:**
              - Run: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              - Time: ${new Date().toISOString()}
              - Triggered by: ${context.eventName}
              
              Please check the workflow logs for more information.`,
              labels: ['bug', 'auto-update']
            });
            
            console.log(`Created issue #${issue.data.number}`);
